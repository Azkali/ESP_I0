/*
 * gui_handler.cpp
 *
 *  Created on: 11.06.2017
 *      Author: chegewara
 */
#include "gui_handler.h"

static const uint8_t angular[]  = {
	// 'violet, 96x64px
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0x07, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x0f, 0xfe, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x7f, 0xfc, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xfc, 0xc0, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xf8, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x7f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 
	0xff, 0xf8, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xf0, 0xf0, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xf0, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xe1, 0xff, 0xff, 0xe0, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 
	0xff, 0xe0, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xc0, 0xf8, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xc0, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0x7c, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 
	0xff, 0x81, 0x7e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x81, 0x3e, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x03, 0x3f, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xf1, 0xff, 0xff, 0x03, 0x3f, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
	0xfe, 0x07, 0x1f, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xfe, 0x07, 0x1f, 0x80, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xfc, 0x0f, 0x0f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xfc, 0x0f, 0x0f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 
	0xf8, 0x0f, 0x07, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xf8, 0x1f, 0x07, 0xe0, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xf8, 0x1f, 0x03, 0xf0, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xf0, 0x00, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 
	0xf0, 0x00, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xe0, 0x00, 0xff, 0xf8, 
	0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xe0, 0x00, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x7f, 0xc0, 0x00, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 
	0xc0, 0xff, 0x00, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x80, 0xff, 0x00, 0x7e, 
	0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x81, 0xff, 0x00, 0x7e, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x7f, 0x01, 0xff, 0x00, 0x3f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 
	0x03, 0xff, 0x00, 0x3f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x03, 0xff, 0x00, 0x1f, 
	0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3e, 0x03, 0xff, 0x00, 0x1f, 0x80, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x3e, 0x07, 0xff, 0x00, 0x1f, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3c, 
	0x07, 0xff, 0x00, 0x0f, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x07, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0x00, 0x01, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfc, 0x0f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

GuiHandler::GuiHandler(DISP_DESC *disp) {
	display = disp;
	x0 = display->width()/2;

	if(disp != NULL){
		y0 = display->height()/2;
	}
}

void GuiHandler::setDisplay(DISP_DESC *disp){
	display = disp;
	y0 = display->height()/2;
}
/*
void GuiHandler::Menu() {
	display->setCursor(0, 0);
	display->setTextColor(WHITE);
	display->setTextSize(2);
	println((char *) "Select a Mode to boot in :");
	display->setCursor(8, 0)
	display->setTextSize(1);
	println((char *) "...");
}
*/
void GuiHandler::Logo() {
	display->drawBitmap(1, 1, angular, TFT_HEIGHT, TFT_WIDTH, TFT_WHITE);
}

void GuiHandler::welcomeScreen() {
	display->setCursor(0, 0);
	display->setTextColor(TFT_WHITE);
	display->setTextSize(3);
	display->drawString((String)"Wello Horld!", 0, display->getCursorY());
	display->setCursor(0, display->getCursorY() + 8);
	display->setTextColor(TFT_YELLOW);
	display->setTextSize(3);
	display->drawString((String)"Modularity", 0, display->getCursorY() + 8 );
	display->setCursor(0, display->getCursorY() + 9);
	display->setTextColor(TFT_YELLOW);
	display->setTextSize(3);
	display->drawString((String)"in the palm of your hand", 0, display->getCursorY() + 9 );
	display->setCursor(0, display->getCursorY() + 10);
	display->setTextColor(TFT_YELLOW);
	display->setTextSize(3);
	display->drawString((String)"anywhere !", 0, display->getCursorY() + 10 );
	display->setCursor(0, display->getCursorY() + 11);
	display->setTextColor(TFT_RED);
	display->setTextSize(3);
	display->drawString((String)"ESP_I0", 0, display->getCursorY() + 11 );
	display->setCursor(0, display->getCursorY() + 13);
	display->setTextSize(3);
	display->setTextColor(TFT_BLUE);
	display->drawString((String)"In FULL COLOR!", 0, display->getCursorY() + 13 );
	display->drawString((String)"", 0, display->getCursorY() + 13);	
}



GuiHandler *GuiHandler::setTitle(String _title) {
	this->title = new String(_title);
	return this;
}
GuiHandler *GuiHandler::setArtist(String _artist) {
	this->artist = new String(_artist);
	return this;
}
GuiHandler *GuiHandler::setAlbum(String _album) {
	this->album = new String(_album);
	return this;
}

GuiHandler *GuiHandler::refreshTitle(){
	this->refreshRow(POS_TITLE, title, TFT_RED);
	return this;
}

GuiHandler *GuiHandler::refreshArtist(){
	this->refreshRow(POS_ARTIST, artist, TFT_YELLOW);	
	return this;
}

GuiHandler *GuiHandler::refreshAlbum(){
	this->refreshRow(POS_ALBUM, album, TFT_CYAN);
	return this;
}

// GuiHandler *GuiHandler::scrollLine(String *line) {
//  display->ScrollSet(12,0,display->TFTHEIGHT,0,10);
// 	display->scroll();
// 	return this;
// }

GuiHandler *GuiHandler::refreshScreen(){
	refreshTitle();
	refreshArtist();
	return refreshAlbum();
}

void GuiHandler::refreshRow(int16_t posx, String *datdata, color_t color){
	//display->clearWindow(0, posx, display->width(), posx + INTERLINE);
	// display->clear()
	display->fillScreen(TFT_BLACK);
	display->setCursor(0, posx + 2);
	display->setTextColor(color);
	display->setTextSize(1);
	display->setTextWrap(false);
	char *newStr = strdup(datdata->c_str());
	display->drawString(newStr, 0, posx + 2);
	free(newStr);
}